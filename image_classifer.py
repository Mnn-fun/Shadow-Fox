# -*- coding: utf-8 -*-
"""image_classifer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YOJj3poKu1Igj6JN_ZVghgG9-E7xMy_m
"""

import tensorflow as tf
from tensorflow.keras import layers, models  # For building the model
import matplotlib.pyplot as plt  # For showing images

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

x_train, x_test = x_train / 255.0, x_test / 255.0

class_names = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

plt.figure(figsize=(5,5))
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_train[i])
    plt.xlabel(class_names[int(y_train[i])])
plt.show()

model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)  # 10 output classes
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

import numpy as np

# Add Softmax to convert raw outputs into probabilities
probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
predictions = probability_model.predict(x_test)

# Predict and show the first image
print("Predicted class:", class_names[np.argmax(predictions[0])])
plt.imshow(x_test[0])
plt.show()

model.save('mnn_image_classifier.keras')

# Upload and Predict
from google.colab import files
print("ðŸ“¸ Please upload an image to classify (should be similar to CIFAR-10 classes like cat, dog, car...)")
uploaded = files.upload()

from PIL import Image
import numpy as np

img_path = list(uploaded.keys())[0]

#  Force RGB and resize
img = Image.open(img_path).convert("RGB").resize((32, 32))

#  Convert to array and normalize
img = np.array(img) / 255.0  # Now shape will be (32, 32, 3)

# Confirm shape before reshaping
print("Image shape before reshape:", img.shape)  # Debug

#Reshape safely
img = img.reshape(1, 32, 32, 3)


# Reload model (optional if same notebook)
from tensorflow import keras
model = keras.models.load_model('mnn_image_classifier.keras')

prediction = model.predict(img)
print("âœ… Predicted class:", class_names[np.argmax(prediction)])

